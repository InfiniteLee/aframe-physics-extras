(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';if('undefined'==typeof AFRAME)throw new Error('Component attempted to register before AFRAME was available.');require('./src/physics-collider.js'),require('./src/physics-collision-filter.js'),require('./src/physics-sleepy.js');

},{"./src/physics-collider.js":2,"./src/physics-collision-filter.js":3,"./src/physics-sleepy.js":4}],2:[function(require,module,exports){
'use strict';AFRAME.registerComponent('physics-collider',{schema:{ignoreSleep:{default:!0},collisionPhysics:{default:!1}},init:function(){this.collisions=new Set,this.currentCollisions=new Set,this.newCollisions=[],this.clearedCollisions=[],this.collisionEventDetails={els:this.newCollisions,clearedEls:this.clearedCollisions}},update:function(){this.el.body?this.updateBody():this.el.addEventListener('body-loaded',this.updateBody.bind(this))},updateBody:function(){this.originalType===void 0&&(this.originalType=this.el.body.type),this.el.body.allowSleep=!1,this.el.body.collisionResponse=this.data.collisionPhysics,this.el.body.type=this.data.ignoreSleep?window.CANNON.Body.KINEMATIC:this.originalType},tick:function(){const a=this.el.body,b=this.currentCollisions,c=this.collisions,d=this.newCollisions,e=this.clearedCollisions;let f;if(a){d.length=e.length=0,b.clear(),a.world.contacts.forEach((e)=>{e.bi===a?(f=e.bj.el,b.add(f),!c.has(f)&&d.push(f)):e.bj===a&&(f=e.bi.el,b.add(f),!c.has(f)&&d.push(f))});for(let a of c)b.has(a)||(e.push(a),c.delete(a));for(let a of d)c.add(a);(d.length||e.length)&&this.el.emit('collisions',this.collisionEventDetails)}}});

},{}],3:[function(require,module,exports){
'use strict';AFRAME.registerComponent('collision-filter',{schema:{group:{default:'default'},collidesWith:{default:['default']}},init:function(){this.updateBodyBound=this.updateBody.bind(this),this.system.registerMe(this),this.el.addEventListener('body-loaded',this.updateBodyBound)},update:function(){this.system.registerMe(this),this.el.body&&this.updateBody()},remove:function(){this.el.removeEventListener('body-loaded',this.updateBodyBound)},updateBody:function(){this.el.body.collisionFilterMask=this.system.getFilterCode(this.data.collidesWith),this.el.body.collisionFilterGroup=this.system.getFilterCode(this.data.group)}}),AFRAME.registerSystem('collision-filter',{schema:{collisionGroups:{default:['default']}},dependencies:['physics'],init:function(){this.maxGroups=Math.log2(Number.MAX_SAFE_INTEGER)},registerMe:function(a){const b=[a.data.group,...a.data.collidesWith].filter((a)=>-1===this.data.collisionGroups.indexOf(a));if(this.data.collisionGroups.push(...b),this.data.collisionGroups.length>this.maxGroups)throw new Error('Too many collision groups')},getFilterCode:function(a){let b=0;return Array.isArray(a)||(a=[a]),a.forEach((a)=>{b+=Math.floor(Math.pow(2,this.data.collisionGroups.indexOf(a)))}),b}});

},{}],4:[function(require,module,exports){
'use strict';AFRAME.registerComponent('sleepy',{schema:{allowSleep:{default:!0},speedLimit:{default:0.25,type:'number'},delay:{default:0.25,type:'number'},linearDamping:{default:0.99,type:'number'},angularDamping:{default:0.99,type:'number'},holdState:{default:'grabbed'}},init:function(){this.updateBodyBound=this.updateBody.bind(this),this.holdStateBound=this.holdState.bind(this),this.resumeStateBound=this.resumeState.bind(this),this.el.addEventListener('body-loaded',this.updateBodyBound),this.el.body&&this.initBody()},update:function(){this.el.body&&this.updateBody()},remove:function(){this.el.removeEventListener('body-loaded',this.updateBodyBound),this.el.removeEventListener('stateadded',this.holdStateBound),this.el.removeEventListener('stateremoved',this.resumeStateBound)},updateBody:function(){this.el.body.world.allowSleep=!0,this.el.body.allowSleep=this.data.allowSleep,this.el.body.sleepSpeedLimit=this.data.speedLimit,this.el.body.sleepTimeLimit=this.data.delay,this.el.body.linearDamping=this.data.linearDamping,this.el.body.angularDamping=this.data.angularDamping,this.data.allowSleep?(this.el.addEventListener('stateadded',this.holdStateBound),this.el.addEventListener('stateremoved',this.resumeStateBound)):(this.el.removeEventListener('stateadded',this.holdStateBound),this.el.removeEventListener('stateremoved',this.resumeStateBound))},holdState:function(a){a.detail.state===this.data.holdState&&(this.el.body.allowSleep=!1)},resumeState:function(a){a.detail.state===this.data.holdState&&(this.el.body.allowSleep=this.data.allowSleep)}});

},{}]},{},[1]);
